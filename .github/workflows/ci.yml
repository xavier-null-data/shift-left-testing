name: CodeFlow CI (Shift Left POC)

on:
  pull_request:
    # se dispara en PRs hacia develop
    types: [opened, synchronize, reopened]
    branches:
      - develop
  push:
    # ignora pushes directos a develop, solo corre en ramas fuera de esa
    branches-ignore:
      - develop
    # para evitar loops cuando se modifica el mismo workflow
    paths-ignore:
      - ".github/**"

jobs:
  php-lint:
    name: Laravel Pint Check
    runs-on: ubuntu-latest
    outputs:
      lint_status: ${{ steps.lint.outputs.lint_status }}
      lint_summary: ${{ steps.lint.outputs.lint_summary }}

    steps:
      - uses: actions/checkout@v3

      # setup básico de PHP (versión 8.3)
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, bcmath, intl
          coverage: none

      # cache de dependencias para acelerar los runs
      - name: Cache composer deps
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-deps-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-deps-

      - name: Instalar dependencias
        run: composer install --no-progress --prefer-dist --no-suggest

      # limpiar cachés de Laravel, a veces el config cache da warnings
      - name: Ejecutar artisan básicos
        run: |
          php artisan config:clear || true
          php artisan cache:clear || true

      # instalamos Pint globalmente para chequear estilo
      - name: Instalar Laravel Pint temporalmente
        run: composer global require laravel/pint --no-progress --no-suggest

      # solo analizamos archivos PHP modificados respecto a la base branch
      - name: Run Laravel Pint (solo archivos modificados)
        id: lint
        continue-on-error: true
        run: |
          echo "Buscando archivos PHP modificados..."
          BASE_BRANCH=${{ github.event.pull_request.base.ref || 'develop' }}
          echo "Rama base detectada: $BASE_BRANCH"
          git fetch origin $BASE_BRANCH --depth=1 || exit 0

          CHANGED_FILES=$(git diff --name-only origin/$BASE_BRANCH | grep '\.php$' || true)

          if [ -z "$CHANGED_FILES" ]; then
            echo "No hay archivos PHP modificados. Saltando lint."
            echo "lint_status=skipped" >> $GITHUB_OUTPUT
            echo "lint_summary=Sin archivos PHP modificados" >> $GITHUB_OUTPUT
          else
            ~/.composer/vendor/bin/pint --test $CHANGED_FILES | tee pint_output.txt
            EXIT_CODE=${PIPESTATUS[0]}
            SUMMARY=$(grep -E "FAIL|PASSED" pint_output.txt | tail -n 1 | sed 's/\"//g')
            echo "lint_summary=$SUMMARY" >> $GITHUB_OUTPUT
            if [ $EXIT_CODE -eq 0 ]; then
              echo "lint_status=success" >> $GITHUB_OUTPUT
            else
              echo "lint_status=failure" >> $GITHUB_OUTPUT
            fi
          fi

  larastan-analyze:
    name: Larastan Static Analysis
    runs-on: ubuntu-latest
    needs: [php-lint]
    continue-on-error: true # si Larastan falla, igual seguimos con el pipeline

    # exportamos el estado real de Larastan (success/failure) como output
    outputs:
      larastan_status: ${{ steps.analyze.outputs.larastan_status }}

    # detectar vulnerabilidades, queries inseguras,
    # y problemas de tipos o propiedades no definidas antes de los tests
    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, bcmath, intl
          coverage: none

      - name: Cache composer deps
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-deps-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-deps-

      - name: Install dependencies
        run: composer install --no-progress --prefer-dist

      # analizamos el proyecto con Larastan y guardamos el exit code real
      - name: Run Larastan (PHPStan for Laravel)
        id: analyze
        run: |
          # ejecuta Larastan y captura su código de salida (0=OK, distinto de 0=errores)
          vendor/bin/phpstan analyse --memory-limit=1G --no-progress || EXIT_CODE=$?
          if [ -z "$EXIT_CODE" ]; then
            EXIT_CODE=0
          fi

          # si hubo errores, guardamos failure; si no, success
          if [ $EXIT_CODE -ne 0 ]; then
            echo "larastan_status=failure" >> $GITHUB_OUTPUT
          else
            echo "larastan_status=success" >> $GITHUB_OUTPUT
          fi

  laravel-ci:
    name: Laravel CI (Smoke / Critical / Complete)
    runs-on: ubuntu-latest
    needs: [php-lint, larastan-analyze]
    if: always() # queremos que este job se ejecute siempre, sin importar si algo anterior falló

    env:
      APP_ENV: testing
      APP_KEY: base64:ZmFrZV9hcHBfa2V5X2Zvcl9jaQ==
      DB_CONNECTION: sqlite
      DB_DATABASE: ":memory:"

    steps:
      - uses: actions/checkout@v3

      # mismo setup que los otros jobs
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, bcmath, intl
          coverage: none

      - name: Cache composer deps
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-deps-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-deps-

      - name: Instalar dependencias
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      # generamos .env para que las pruebas puedan correr sin fallar por APP_KEY o DB
      - name: Configurar entorno limpio
        run: |
          cp .env.example .env
          php artisan key:generate
          echo "APP_ENV=testing" >> .env
          echo "DB_CONNECTION=sqlite" >> .env
          echo "DB_DATABASE=:memory:" >> .env

      # usamos yq para leer .github/test-input.yml (define qué tests se ejecutan)
      - name: Instalar yq
        uses: mikefarah/yq@v4.44.3
        with:
          args: --version

      # parsea el archivo test-input.yml y se guardan las rutas en variables
      # smoke / critical / complete
      - name: Extraer suites de test
        id: extract
        run: |
          if [ ! -f .github/test-input.yml ]; then
            echo "No se encontró .github/test-input.yml"
            exit 0
          fi

          SMOKE=$(yq -r '.smoke // [] | join(" ")' .github/test-input.yml)
          CRITICAL=$(yq -r '."critical-suite" // [] | join(" ")' .github/test-input.yml)
          COMPLETE=$(yq -r '."complete-suite" // [] | join(" ")' .github/test-input.yml)

          echo "smoke=$SMOKE" >> $GITHUB_OUTPUT
          echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
          echo "complete=$COMPLETE" >> $GITHUB_OUTPUT

      # ejecuta solo los tests marcados como smoke
      - name: Ejecutar pruebas Smoke
        id: smoke
        if: steps.extract.outputs.smoke != ''
        run: |
          echo "Ejecución Smoke suite:"
          vendor/bin/phpunit ${{ steps.extract.outputs.smoke }}

      # tests críticos (solo si la rama es un hotfix)
      - name: Ejecutar pruebas Críticas
        id: critical
        if: >
          github.event_name == 'pull_request' &&
          startsWith(github.head_ref, 'hotfix/') &&
          steps.extract.outputs.critical != ''
        run: |
          echo "Ejecución Critical suite:"
          vendor/bin/phpunit ${{ steps.extract.outputs.critical }}

      # tests completos (para ramas feature, release, etc)
      - name: Ejecutar pruebas Completas
        id: complete
        if: >
          github.event_name == 'pull_request' &&
          !startsWith(github.head_ref, 'hotfix/') &&
          steps.extract.outputs.complete != ''
        run: |
          echo "Ejecución Complete suite:"
          vendor/bin/phpunit ${{ steps.extract.outputs.complete }}

      # notifica resultados en Slack (siempre al final)
      - name: Notificar estado en Slack
        if: always() # queremos que se ejecute aunque haya fallos
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: >
            {"text":"[CodeFlow CI]\nEstado general: ${{ job.status }}\nLint: ${{ needs.php-lint.outputs.lint_status }} (${{ needs.php-lint.outputs.lint_summary }})\nLarastan: ${{ needs.larastan-analyze.outputs.larastan_status }}\nSmoke: ${{ steps.smoke.outcome || 'no ejecutado' }}\nCritical: ${{ steps.critical.outcome || 'no ejecutado' }}\nComplete: ${{ steps.complete.outcome || 'no ejecutado' }}\nBranch: ${{ github.head_ref || github.ref_name }}\nAutor: ${{ github.actor }}"}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
